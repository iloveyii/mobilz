source opMainSrc
{
	type			= mysql

	sql_host		= localhost
	sql_user		= oppettidr
	sql_pass		= oppettidr
	sql_db			= oppettidr
	sql_port		= 3306	# optional, default is 3306


	# MySQL specific client connection flags
	# optional, default is 0
	#
	#mysql_connect_flags	= 32 # enable compression

	sql_query_pre		= SET NAMES utf8
	sql_query_pre		= SET net_read_timeout = 90000
	sql_query_pre		= SET net_write_timeout = 90000
	sql_query_pre		= SET interactive_timeout = 90000
	sql_query_pre		= SET wait_timeout = 90000

	sql_query		= \
		SELECT \
			l.id, \
			l.name, \
			pc.name AS postalCity \
		FROM \
			location AS l \
		LEFT JOIN \
			postalCity as pc ON pc.id = l.postalCityId
}

index opMainIndex
{
	# Index type. Known values are 'plain', 'distributed', and 'rt'. Optional, default is 'plain' (plain local index).
	type				= plain

	# see mainSrc above.
	source				= opMainSrc

	# where the index will be stored on disk.
	path				= /usr/local/sphinx/var/data-op/opMainIndex

	# keep attributes
	docinfo				= extern

	# make sure cached queries remain in ram to avoid swap
	mlock				= 1

	# see manual
	morphology			= libstemmer_sv

	# the other option is crc, crc has collisions and only drawback of keywords is wildcard-matching in worst case scenarios (when word appears alot) see manual ofcourse..
	dict				= crc

	# Whether to detect and index sentence and paragraph boundaries. nope.
	#index_sp			= 0

	# A list of in-field HTML/XML zones to index. Optional, default is empty (do not index zones).
	#index_zones 		=

	# minimum word length at which to enable stemming. Optional, default is 1 (stem everything).
	# this would make gps = be gp,, problem? see wordforms
	min_stemming_len 	= 1

	# Stopwords are the words that will not be indexed. Typically you'd put most frequent words in the stopwords list because they do not add much value to search results but consume a lot of resources to process.
	#stopwords =

	# mappings of words .
	#wordforms 			= /usr/local/sphinx/etc/wordforms_main.txt

	# Exceptions allow to map one or more tokens (including tokens with characters that would normally be excluded) to a single keyword.
	# They are similar to wordforms in that they also perform mapping, but have a number of important differences.
	#exceptions 			=

	# the minimum length of a word to index.. we take em all.. change to 2 if you need some kind of performance boost, but BEWARE queries like "i b m" might stop working..
    min_word_len		= 1

	# does i need to explain this nigga?
	charset_type		= utf-8

	# all our allowed characters. and mappings for them.. for U+00AB see http://www.fileformat.info/info/unicode/char/ab/index.htm , change the 'ab' part in the url to U+00?? . ok?
	charset_table		= 0..9, a..z, _, A..Z->a..z, U+00C0, U+00C1, \
            U+00C2, U+00C3, U+00C4, U+00C5, U+00C7, U+00C8, \
            U+00C9, U+00CA, U+00CB, U+00CC, U+00CD, U+00CE, \
            U+00CF, U+00D1, U+00D2, U+00D3, U+00D4, U+00D5, \
            U+00D6, U+00D8, U+00D9, U+00DA, U+00DB, U+00DC, \
            U+00DD, U+00E0, U+00E1, U+00E2, U+00E3, U+00E4, \
            U+00E5, U+00E7, U+00E8, U+00E9, U+00EA, U+00EB, \
            U+00EC, U+00ED, U+00EE, U+00EF, U+00F1, U+00F2, \
            U+00F3, U+00F4, U+00F5, U+00F6, U+00F8, U+00F9, \
            U+00FA, U+00FB, U+00FC, U+00FD, U+00FF, U+0100, \
            U+0101, U+0102, U+0103, U+0104, U+0105, U+0106, \
            U+0107, U+0108, U+0109, U+010A, U+010B, U+010C, \
            U+010D, U+010E, U+010F, U+0112, U+0113, U+0114, \
            U+0115, U+0116, U+0117, U+0118, U+0119, U+011A, \
            U+011B, U+011C, U+011D, U+011E, U+011F, U+0120, \
            U+0121, U+0122, U+0123, U+0124, U+0125, U+0128, \
            U+0129, U+012A, U+012B, U+012C, U+012D, U+012E, \
            U+012F, U+0130, U+0134, U+0135, U+0136, U+0137, \
            U+0139, U+013A, U+013B, U+013C, U+013D, U+013E, \
            U+0142, U+0143, U+0144, U+0145, U+0146, U+0147, \
            U+0148, U+014C, U+014D, U+014E, U+014F, U+0150, \
            U+0151, U+0154, U+0155, U+0156, U+0157, U+0158, \
            U+0159, U+015A, U+015B, U+015C, U+015D, U+015E, \
            U+015F, U+0160, U+0161, U+0162, U+0163, U+0164, \
            U+0165, U+0168, U+0169, U+016A, U+016B, U+016C, \
            U+016D, U+016E, U+016F, U+0170, U+0171, U+0172, \
            U+0173, U+0174, U+0175, U+0176, U+0177, U+0178, \
            U+0179, U+017A, U+017B, U+017C, U+017D, U+017E, \
            U+01A0, U+01A1, U+01AF, U+01B0, U+01CD, U+01CE, \
            U+01CF, U+01D0, U+01D1, U+01D2, U+01D3, U+01D4, \
            U+01D5, U+01D6, U+01D7, U+01D8, U+01D9, U+01DA, \
            U+01DB, U+01DC, U+01DE, U+01DF, U+01E0, U+01E1, \
            U+01E6, U+01E7, U+01E8, U+01E9, U+01EA, U+01EB, \
            U+01EC, U+01ED, U+01F0, U+01F4, U+01F5, U+01F8, \
            U+01F9, U+01FA, U+01FB, U+0200, U+0201, U+0202, \
            U+0203, U+0204, U+0205, U+0206, U+0207, U+0208, \
            U+0209, U+020A, U+020B, U+020C, U+020D, U+020E, \
            U+020F, U+0210, U+0211, U+0212, U+0213, U+0214, \
            U+0215, U+0216, U+0217, U+0218, U+0219, U+021A, \
            U+021B, U+021E, U+021F, U+0226, U+0227, U+0228, \
            U+0229, U+022A, U+022B, U+022C, U+022D, U+022E, \
            U+022F, U+0230, U+0231, U+0232, U+0233, U+1E00, \
            U+1E01, U+1E02, U+1E03, U+1E04, U+1E05, U+1E06, \
            U+1E07, U+1E08, U+1E09, U+1E0A, U+1E0B, U+1E0C, \
            U+1E0D, U+1E0E, U+1E0F, U+1E10, U+1E11, U+1E12, \
            U+1E13, U+1E14, U+1E15, U+1E16, U+1E17, U+1E18, \
            U+1E19, U+1E1A, U+1E1B, U+1E1C, U+1E1D, U+1E1E, \
            U+1E1F, U+1E20, U+1E21, U+1E22, U+1E23, U+1E24, \
            U+1E25, U+1E26, U+1E27, U+1E28, U+1E29, U+1E2A, \
            U+1E2B, U+1E2C, U+1E2D, U+1E2E, U+1E2F, U+1E30, \
            U+1E31, U+1E32, U+1E33, U+1E34, U+1E35, U+1E36, \
            U+1E37, U+1E38, U+1E39, U+1E3A, U+1E3B, U+1E3C, \
            U+1E3D, U+1E3E, U+1E3F, U+1E40, U+1E41, U+1E42, \
            U+1E43, U+1E44, U+1E45, U+1E46, U+1E47, U+1E48, \
            U+1E49, U+1E4A, U+1E4B, U+1E4C, U+1E4D, U+1E4E, \
            U+1E4F, U+1E50, U+1E51, U+1E52, U+1E53, U+1E54, \
            U+1E55, U+1E56, U+1E57, U+1E58, U+1E59, U+1E5A, \
            U+1E5B, U+1E5C, U+1E5D, U+1E5E, U+1E5F, U+1E60, \
            U+1E61, U+1E62, U+1E63, U+1E64, U+1E65, U+1E66, \
            U+1E67, U+1E68, U+1E69, U+1E6A, U+1E6B, U+1E6C, \
            U+1E6D, U+1E6E, U+1E6F, U+1E70, U+1E71, U+1E72, \
            U+1E73, U+1E74, U+1E75, U+1E76, U+1E77, U+1E78, \
            U+1E79, U+1E7A, U+1E7B, U+1E7C, U+1E7D, U+1E7E, \
            U+1E7F, U+1E80, U+1E81, U+1E82, U+1E83, U+1E84, \
            U+1E85, U+1E86, U+1E87, U+1E88, U+1E89, U+1E8A, \
            U+1E8B, U+1E8C, U+1E8D, U+1E8E, U+1E8F, U+1E96, \
            U+1E97, U+1E98, U+1E99, U+1EA0, U+1EA1, U+1EA2, \
            U+1EA3, U+1EA4, U+1EA5, U+1EA6, U+1EA7, U+1EA8, \
            U+1EA9, U+1EAA, U+1EAB, U+1EAC, U+1EAD, U+1EAE, \
            U+1EAF, U+1EB0, U+1EB1, U+1EB2, U+1EB3, U+1EB4, \
            U+1EB5, U+1EB6, U+1EB7, U+1EB8, U+1EB9, U+1EBA, \
            U+1EBB, U+1EBC, U+1EBD, U+1EBE, U+1EBF, U+1EC0, \
            U+1EC1, U+1EC2, U+1EC3, U+1EC4, U+1EC5, U+1EC6, \
            U+1EC7, U+1EC8, U+1EC9, U+1ECA, U+1ECB, U+1ECC, \
            U+1ECD, U+1ECE, U+1ECF, U+1ED0, U+1ED1, U+1ED2, \
            U+1ED3, U+1ED4, U+1ED5, U+1ED6, U+1ED7, U+1ED8, \
            U+1ED9, U+1EDA, U+1EDB, U+1EDC, U+1EDD, U+1EDE, \
            U+1EDF, U+1EE0, U+1EE1, U+1EE2, U+1EE3, U+1EE4, \
            U+1EE5, U+1EE6, U+1EE7, U+1EE8, U+1EE9, U+1EEA, \
            U+1EEB, U+1EEC, U+1EED, U+1EEE, U+1EEF, U+1EF0, \
            U+1EF1, U+1EF2, U+1EF3, U+1EF4, U+1EF5, U+1EF6, \
            U+1EF7, U+1EF8, U+1EF9, \
            U+002E, U+002C, U+002B, U+0026, U+0021, U+0022, U+0023, U+0024, U+0025, U+0027, U+0028, U+0029, U+002F, U+003A, U+003B, U+003C, U+003D, U+003E, U+003F, \
            U+0040, U+005B, U+005C, U+005D, U+005E, U+005F, U+0060, U+007B, U+007C, U+007D, U+007E, U+00A1, U+00A2, U+00A3, U+00A4, U+00A5, U+00A6, U+00A7, U+00A8, U+00A9, U+00AA, \
            U+00AB, U+00AC, U+00AD, U+00AE, U+00AF, U+00B0, U+00B1, U+00B2, U+00B3, U+00B4, U+00B5, U+00B6, U+00B7, U+00B8, U+00B9, U+00BA, U+00BB, U+00BC, U+00BD, U+00BE, U+00BF, \
			U+00D7

	#ignore_chars	=


	# minimum word prefix length to index
	# optional, default is 0 (do not index prefixes)
	#
	#min_prefix_len		= 0

	# minimum word infix length to index
	# optional, default is 0 (do not index infixes)
	# !!! BEWARE setting this might change the dict from keywords to crc !!!
	#
	min_infix_len		= 1


	# list of fields to limit prefix/infix indexing to
	# optional, default value is empty (index all fields in prefix/infix mode)
	#
	#prefix_fields		=
	#infix_fields		=


	# enable star-syntax (wildcards) when searching prefix/infix indexes
	# search-time only, does not affect indexing, can be 0 or 1
	# optional, default is 0 (do not use wildcard syntax)
	#
	enable_star			= 1


	html_strip			= 0

	# Whether to pre-open all index files, or open them per each query. Optional, default is 0 (do not preopen).
	preopen 			= 1

	# When enabled, index_exact_words forces indexer to put the raw keywords in the index along with the stemmed versions.
	# That, in turn, enables exact form operator in the query language to work. This impacts the index size and the indexing time.
	# However, searching performance is not impacted at all.
	index_exact_words 	= 1

	# Expand keywords with exact forms and/or stars when possible. Optional, default is 0 (do not expand keywords).
	expand_keywords 	= 1
}


#############################################################################
## indexer settings
#############################################################################

indexer
{
	# memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
	# optional, default is 32M, max is 2047M, recommended is 256M to 1024M
	mem_limit		= 1024M

	# maximum IO calls per second (for I/O throttling)
	# optional, default is 0 (unlimited)
	#
	# max_iops		= 40


	# maximum IO call size, bytes (for I/O throttling)
	# optional, default is 0 (unlimited)
	#
	# max_iosize		= 1048576


	# maximum xmlpipe2 field length, bytes
	# optional, default is 2M
	#
	# max_xmlpipe2_field	= 4M


	# write buffer size, bytes
	# several (currently up to 4) buffers will be allocated
	# write buffers are allocated in addition to mem_limit
	# optional, default is 1M
	#
	# write_buffer		= 1M


	# maximum file field adaptive buffer size
	# optional, default is 8M, minimum is 1M
	#
	# max_file_field_buffer	= 32M
}

#############################################################################
## searchd settings
#############################################################################

searchd
{
	# [hostname:]port[:protocol], or /unix/socket/path to listen on
	# known protocols are 'sphinx' (SphinxAPI) and 'mysql41' (SphinxQL)
	#
	# multi-value, multiple listen points are allowed
	# optional, defaults are 9312:sphinx and 9306:mysql41, as below
	#
	# listen			= 127.0.0.1
	# listen			= 192.168.0.1:9312
	# listen			= 9312
	# listen			= /var/run/searchd.sock
	listen			= 127.0.0.1:9999

	# log file, searchd run info is logged here
	# optional, default is 'searchd.log'
	log			= /usr/local/sphinx/var/log/op_searchd.log

	# query log file, all search queries are logged here
	# optional, default is empty (do not log queries)
	query_log		= /usr/local/sphinx/var/log/op_query.log

	# client read timeout, seconds
	# optional, default is 5
	read_timeout		= 5

	# request timeout, seconds
	# optional, default is 5 minutes
	client_timeout		= 300

	# maximum amount of children to fork (concurrent searches to run)
	# optional, default is 0 (unlimited)
	max_children		= 30

	# PID file, searchd process ID file name
	# mandatory
	pid_file		= /usr/local/sphinx/var/log/op_searchd.pid

	# max amount of matches the daemon ever keeps in RAM, per-index
	# WARNING, THERE'S ALSO PER-QUERY LIMIT, SEE SetLimits() API CALL
	# default is 1000 (just like Google)
	max_matches		= 2000000

	# seamless rotate, prevents rotate stalls if precaching huge datasets
	# optional, default is 1
	seamless_rotate		= 1

	# whether to forcibly preopen all indexes on startup
	# optional, default is 1 (preopen everything)
	preopen_indexes		= 1

	# whether to unlink .old index copies on succesful rotation.
	# optional, default is 1 (do unlink)
	unlink_old		= 1

	# attribute updates periodic flush timeout, seconds
	# updates will be automatically dumped to disk this frequently
	# optional, default is 0 (disable periodic flush)
	#
	# attr_flush_period	= 900


	# instance-wide ondisk_dict defaults (per-index value take precedence)
	# optional, default is 0 (precache all dictionaries in RAM)
	#
	ondisk_dict_default	= 1



	# MVA updates pool size
	# shared between all instances of searchd, disables attr flushes!
	# optional, default size is 1M
	mva_updates_pool	= 1M

	# max allowed network packet size
	# limits both query packets from clients, and responses from agents
	# optional, default size is 8M
	max_packet_size		= 8M

	# crash log path
	# searchd will (try to) log crashed query to 'crash_log_path.PID' file
	# optional, default is empty (do not create crash logs)
	#
	# crash_log_path		= /usr/local/sphinx/var/log/crash


	# max allowed per-query filter count
	# optional, default is 256
	max_filters		= 256

	# max allowed per-filter values count
	# optional, default is 4096
	max_filter_values	= 4096


	# socket listen queue length
	# optional, default is 5
	#
	# listen_backlog		= 5


	# per-keyword read buffer size
	# optional, default is 256K
	#
	# read_buffer		= 256K


	# unhinted read size (currently used when reading hits)
	# optional, default is 32K
	#
	# read_unhinted		= 32K


	# max allowed per-batch query count (aka multi-query count)
	# optional, default is 32
	max_batch_queries	= 32


	# max common subtree document cache size, per-query
	# optional, default is 0 (disable subtree optimization)
	#
	# subtree_docs_cache	= 4M


	# max common subtree hit cache size, per-query
	# optional, default is 0 (disable subtree optimization)
	#
	# subtree_hits_cache	= 8M


	# multi-processing mode (MPM)
	# known values are none, fork, prefork, and threads
	# optional, default is fork
	#
	workers			= threads # for RT to work


	# max threads to create for searching local parts of a distributed index
	# optional, default is 0, which means disable multi-threaded searching
	# should work with all MPMs (ie. does NOT require workers=threads)
	#
	# dist_threads		= 4


	# binlog files path; use empty string to disable binlog
	# optional, default is build-time configured data directory
	#
	binlog_path		= # disable logging
	# binlog_path		= /usr/local/sphinx/var/data # binlog.001 etc will be created there


	# binlog flush/sync mode
	# 0 means flush and sync every second
	# 1 means flush and sync every transaction
	# 2 means flush every transaction, sync every second
	# optional, default is 2
	#
	# binlog_flush		= 2


	# binlog per-file size limit
	# optional, default is 128M, 0 means no limit
	#
	# binlog_max_log_size	= 256M


	# per-thread stack size, only affects workers=threads mode
	# optional, default is 64K
	#
	# thread_stack			= 128K


	# per-keyword expansion limit (for dict=keywords prefix searches)
	# optional, default is 0 (no limit)
	#
	expansion_limit		= 1000


	# RT RAM chunks flush period
	# optional, default is 0 (no periodic flush)
	#
	# rt_flush_period		= 900


	# query log file format
	# optional, known values are plain and sphinxql, default is plain
	#
	# query_log_format		= sphinxql


	# version string returned to MySQL network protocol clients
	# optional, default is empty (use Sphinx version)
	#
	# mysql_version_string	= 5.0.37


	# trusted plugin directory
	# optional, default is empty (disable UDFs)
	#
	# plugin_dir			= /usr/local/sphinx/lib


	# default server-wide collation
	# optional, default is libc_ci
	#
	collation_server		= utf8_general_ci


	# server-wide locale for libc based collations
	# optional, default is C
	#
	# collation_libc_locale	= ru_RU.UTF-8


	# threaded server watchdog (only used in workers=threads mode)
	# optional, values are 0 and 1, default is 1 (watchdog on)
	#
	# watchdog				= 1


	# SphinxQL compatibility mode (legacy columns and their names)
	# optional, default is 0 (SQL compliant syntax and result sets)
	#
	# compat_sphinxql_magics	= 1
}

# --eof--
