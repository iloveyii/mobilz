<?php

/**
 * This is the model base class for the table "seo".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Seo".
 *
 * Columns in table "seo" available as properties of the model,
 * followed by relations of table "seo" available as properties of the model.
 *
 * @property string $id
 * @property string $title
 * @property string $metaDescription
 * @property string $metaKeyWords
 *
 * @property Chain[] $chains
 * @property Location[] $locations
 * @property Mall[] $malls
 * @property SeoMapping[] $seoMappings
 */
abstract class BaseSeo extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'seo';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Seo|Seos', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('title', 'length', 'max'=>100),
			array('metaDescription', 'length', 'max'=>200),
			array('metaKeyWords', 'length', 'max'=>255),
			array('title, metaDescription, metaKeyWords', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, title, metaDescription, metaKeyWords', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'chains' => array(self::HAS_MANY, 'Chain', 'seoId'),
			'locations' => array(self::HAS_MANY, 'Location', 'seoId'),
			'malls' => array(self::HAS_MANY, 'Mall', 'seoId'),
			'seoMappings' => array(self::HAS_MANY, 'SeoMapping', 'seoId'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'title' => Yii::t('app', 'Title'),
			'metaDescription' => Yii::t('app', 'Meta Description'),
			'metaKeyWords' => Yii::t('app', 'Meta Key Words'),
			'chains' => null,
			'locations' => null,
			'malls' => null,
			'seoMappings' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('metaDescription', $this->metaDescription, true);
		$criteria->compare('metaKeyWords', $this->metaKeyWords, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}